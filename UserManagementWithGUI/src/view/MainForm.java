/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.formdev.flatlaf.FlatDarculaLaf;
import controller.UserObjectController;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import model.User;

/**
 *
 * @author bigjo
 */
public class MainForm extends javax.swing.JFrame {

    private final UserObjectController uoc;
    private final String[] userTableColumnNames;
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        this.uoc = new UserObjectController();
        this.userTableColumnNames = uoc.getTableColumns();
        initComponents();
        getUserTableRows();
    }
    
    private final int USERCOL_ID = 0;
    private final int USERCOL_NAME = 1;
    private final int USERCOL_AGE = 2;
    private final int USERCOL_ADDRESS = 3;
    
    protected void getUserTableRows(){
        ArrayList<User> userList = uoc.viewAllUsers();
        DefaultTableModel dtm = (DefaultTableModel)userTable.getModel();
        dtm.setRowCount(0);
        userList.forEach((User n) -> {
            dtm.addRow(new Object[]{
                n.getId(),n.getName(),n.getAge(),n.getAddress()
            });
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTableWrapper = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        pnlTableButtons = new javax.swing.JPanel();
        btnTableAddRow = new javax.swing.JButton();
        btnTableSearch = new javax.swing.JButton();
        btnTableEditRow = new javax.swing.JButton();
        btnTableDeleteRow = new javax.swing.JButton();
        btnTableCancelSelect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        pnlTableWrapper.setBorder(javax.swing.BorderFactory.createTitledBorder("Table"));
        pnlTableWrapper.setLayout(new java.awt.BorderLayout());

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(userTable);
        if (userTable.getColumnModel().getColumnCount() > 0) {
            userTable.getColumnModel().getColumn(0).setHeaderValue(userTableColumnNames[0]);
            userTable.getColumnModel().getColumn(1).setHeaderValue(userTableColumnNames[1]);
            userTable.getColumnModel().getColumn(2).setHeaderValue(userTableColumnNames[2]);
            userTable.getColumnModel().getColumn(3).setHeaderValue(userTableColumnNames[3]);
        }

        pnlTableWrapper.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pnlTableButtons.setBorder(javax.swing.BorderFactory.createTitledBorder("Table Controls"));

        btnTableAddRow.setText("Add User");
        btnTableAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTableAddRowActionPerformed(evt);
            }
        });
        pnlTableButtons.add(btnTableAddRow);

        btnTableSearch.setText("Search by ID");
        btnTableSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTableSearchActionPerformed(evt);
            }
        });
        pnlTableButtons.add(btnTableSearch);

        btnTableEditRow.setText("Edit User");
        btnTableEditRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTableEditRowActionPerformed(evt);
            }
        });
        pnlTableButtons.add(btnTableEditRow);

        btnTableDeleteRow.setText("Delete User");
        btnTableDeleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTableDeleteRowActionPerformed(evt);
            }
        });
        pnlTableButtons.add(btnTableDeleteRow);

        btnTableCancelSelect.setText("Cancel Selection");
        btnTableCancelSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTableCancelSelectActionPerformed(evt);
            }
        });
        pnlTableButtons.add(btnTableCancelSelect);

        pnlTableWrapper.add(pnlTableButtons, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(pnlTableWrapper);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTableSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTableSearchActionPerformed
        
        //Ask for input
        String selectedID = JOptionPane.showInputDialog(
                this, "Insert User ID:", "User ID Search", JOptionPane.INFORMATION_MESSAGE
        );
        
        System.out.println("Selected Option: " + selectedID);
        
        //Map the value of the User IDs to their row value in the table
        Map<String, Integer> idmap = new HashMap<String, Integer>();
        DefaultTableModel dtm = (DefaultTableModel)userTable.getModel();
        for (int i = 0; i < dtm.getRowCount(); i++) {
            Object row = dtm.getValueAt(i, 0);
            idmap.put(row.toString(), i);
        }
        
        //Highlight the row in the table where this ID can be found
        try{
            ListSelectionModel lsm = (ListSelectionModel) userTable.getSelectionModel();
            lsm.setSelectionInterval(idmap.get(selectedID), idmap.get(selectedID));
        } catch(Exception e){
            //System.out.println("Invalid Index " + e);
            JOptionPane.showMessageDialog(this, "Given ID " + selectedID + " does not exist", "Error Notice", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnTableSearchActionPerformed

    private void btnTableCancelSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTableCancelSelectActionPerformed
        userTable.clearSelection();
    }//GEN-LAST:event_btnTableCancelSelectActionPerformed

    private void btnTableEditRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTableEditRowActionPerformed
        int selRow = userTable.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel) userTable.getModel();
        
        if(selRow == -1){
            JOptionPane.showMessageDialog(
                    this, "No row selected in table", "Cannot Edit User", JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        EditUserPanel eup = new EditUserPanel();
        eup.setUserFields(new String[]{
            dtm.getValueAt(selRow, USERCOL_ID).toString(),
            dtm.getValueAt(selRow, USERCOL_NAME).toString(),
            dtm.getValueAt(selRow, USERCOL_AGE).toString(),
            dtm.getValueAt(selRow, USERCOL_ADDRESS).toString()
        });
        int res = JOptionPane.showConfirmDialog(this, eup, "Edit User Form", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        
        //Do insert
        if (res == JOptionPane.OK_OPTION) {
            Object[] results = eup.getUserFields();
            uoc.editUser(new User(
                    results[eup.INPUT_NAME].toString(),
                    Integer.parseInt(results[eup.INPUT_AGE].toString()),
                    results[eup.INPUT_ADDRESS].toString()
            ),
            Integer.parseInt(dtm.getValueAt(selRow, USERCOL_ID).toString()));
        }
        
        getUserTableRows();
    }//GEN-LAST:event_btnTableEditRowActionPerformed

    private void btnTableDeleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTableDeleteRowActionPerformed
        int selectedRowId = userTable.getSelectedRow();
        
        if(selectedRowId == -1){
            JOptionPane.showMessageDialog(this, "No row selected, nothing to delete", "Notice", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DefaultTableModel dtm = (DefaultTableModel) userTable.getModel();
        int selectedUserID = Integer.parseInt(dtm.getValueAt(selectedRowId, 0).toString());
        int decision = JOptionPane.showConfirmDialog(this, "Do you really want to delete user "+selectedUserID, "Confirm Delete", JOptionPane.YES_NO_OPTION);
        
        System.out.println("Chosen Option: " + decision);
        
        switch(decision){
            case 0:
                uoc.deleteUser(selectedUserID);
                break;
        }
    }//GEN-LAST:event_btnTableDeleteRowActionPerformed

    private void btnTableAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTableAddRowActionPerformed
//        new AddUser().setVisible(true);
        AddUserPanel aup = new AddUserPanel();
        int res = JOptionPane.showConfirmDialog(this, aup, "Add User Form", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        
        //Do insert
        if (res == JOptionPane.OK_OPTION) {
            boolean addUser = uoc.addUser(new User(
                    aup.getInputName(),
                    Integer.parseInt(aup.getInputAge()),
                    aup.getInputAddress()
            ));
        }
        
        getUserTableRows();
    }//GEN-LAST:event_btnTableAddRowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel( new FlatDarculaLaf() );
        } catch( UnsupportedLookAndFeelException ex ) {
            System.err.println( "Failed to initialize LaF" + ex );
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTableAddRow;
    private javax.swing.JButton btnTableCancelSelect;
    private javax.swing.JButton btnTableDeleteRow;
    private javax.swing.JButton btnTableEditRow;
    private javax.swing.JButton btnTableSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlTableButtons;
    private javax.swing.JPanel pnlTableWrapper;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
